# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="?pXoQCTY?Wq5NUufmjsmY_PUQmX1jj8vg3`IT[iA8FEE?grocq^asYuxR`7gXoj["

# The application languages
# ~~~~~
application.langs="en,nl,no,nb"

# Mail support - not the framework one, there isn't one yet
mail.smtp.type=mock

# Akka
# ~~~~
include "akka.conf"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory.

# Root logger:
logger.root=WARN

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG
logger.CultureHub=DEBUG
logger.Search=DEBUG

## Some annoying loggers that we quiet down for a nice DEV experience
logger.org.apache.http=INFO
logger.com.novus.salat.Context=WARN

# CultureHub
# ~~~~~~~~~~

## TODO deprecated, used only by dos. remove when possible
cultureCommons.nodeName="delving"


# Mail
# ~~~~

emailTarget = {
   adminTo = "servers@delving.eu",
   exceptionTo = "servers@delving.eu",
   feedbackTo = "servers@delving.eu",
   registerTo = "servers@delving.eu",
   systemFrom = "noreply@delving.eu",
   feedbackFrom = "noreply@delving.eu"
}

# BaseX
# ~~~~~
basex.host=localhost
basex.port=1984
basex.eport=1985
basex.user=admin
basex.password=admin

# Demo
# ~~~~

# FastCGI IIPSRV module URL
iipsrv.url="http://localhost:8983/fastcgi/fcgi-bin/iipsrv.fcgi"


# Services OAI-PMH Repository settings
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# The name of the repository that is given in the ?verb=Identify response
services.pmh.repositoryName = Delving MetaRepo

# The administrator email that is given in the ?verb=Identify response
services.pmh.adminEmail = "info@delving.eu"

# The earliest Datestamp of the repository and the one that is given in the ?verb=Identify response
services.pmh.earliestDateStamp = "1990-02-01T12:00:00Z"

# The name of the OAI-PMH repository that is given in the ?verb=Identify response
services.pmh.repositoryIdentifier = meta-repo.delving.eu

# The sample identifier that is given in the ?verb=Identify response
services.pmh.sampleIdentifier = "VerzetsMuseum:icn:250:1"

# The number of records returned by the OAI-PMH repository per ?verb=List* request
services.pmh.responseListSize = 250

# The time to live for each Harvest step before being cleaned up. So time (now) + this value is the experationDate
services.pmh.harvestStepCleanupDelay = 15000

# Whether or not it is possible to harvest the raw source data
services.pmh.allowRawHarvesting = false

# DoS Settings
# ~~~~~~~~~~~~

# Absolute path to GraphicsMagick (e.g. /usr/local/bin/gm)
dos.graphicsmagic.cmd=/usr/local/bin/gm

# Temporary directory
dos.tmpDir=/tmp

# Domain Configurations
# ~~~~~~~~~~~~~~~~~~~~~

# Configure the URL to which to redirect to when accessing an invalid domain

defaultDomainRedirect="http://www.delving.eu"

# The application instance identifier, used to discriminate amongst running application instances in a multi-instance
# set-up (for long-running background processing tasks)
cultureHub.instanceIdentifier = "default"

configurations {

 delving = {
   orgId = "delving",
   domains = ["delving"],

   mongoDatabase = "culturehub",
   solr.baseUrl = "http://localhost:8983/solr/core2",

   services = {

     commons = {
         host = "",
         nodeName = "delving",
         apiToken = "TEST",
     },

     dos = {
         fileStoreDatabase = "fileStore-delving",
         imageCacheDatabase = "imageCache-delving",
         imageCacheEnabled = false,
         tilesWorkingBaseDir = "/tmp/tilesWork",
         tilesOutputBaseDir = "/tmp/tiles",
     },

     directory = {
         providerDirectoryUrl = "/delving/museum/",
     },

     search = {
       facets = "delving_recordType:metadata.delving.recordType,delving_provider:metadata.delving.provider,delving_owner:metadata.delving.owner,delving_hasDigitalObject:metadata.delving.hasDigitalObject",
       sortFields = "delving_hasDigitalObject",
       searchIn = {
         "dc_title_text" = "metadata.dc.title",
         "dc_creator_text" = "metadata.dc.creator",
         "dc_subject_text" = "metadata.dc.subject"
       },
       apiWsKey = false,
       pageSize = 20
     }


   },

   plugins = ["hubNode", "dataSet", "cms", "statistics"],

   schemas = ["aff", "icn", "abm", "ese", "tib", "abc", "mods"],
   crossWalks = ["aff-ese", "aff-icn", "aff-tib"],

   ui = {
     themeDir = "default",
     defaultLanguage = "en",
     siteName = "Delving"
     siteSlogan = "Open source solutions for Cultural Heritage",
     showLogin = true
     showRegistration = true
   },

   roles = {
       customRole = {
           description.en = "Example custom role"
     }
   }
 }

}
