# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET         /favicon.ico                                                           controllers.Application.notFound(what = "favicon.ico")
GET         /assets/themes/:theme/info.conf                                        controllers.Application.notFound(theme)

GET         /robots.txt                                                            controllers.Assets.at(path="/public", file="robots.txt")

# Home page
GET     /                                                                          controllers.Application.index

# Site page
GET        /page/:key                                                              controllers.Application.page(key)

# Form-based authentication
GET        /login                                                                  controllers.Authentication.login
POST       /login                                                                  controllers.Authentication.authenticate
GET        /logout                                                                 controllers.Authentication.logout

# OAuth2
GET        /authorize                                                              controllers.OAuth2Authenticator.authenticate
GET        /token                                                                  controllers.OAuth2TokenEndpoint.token

# Demo space
GET        /demo/viewer                                                            controllers.Demo.view(image: Option[String])
GET        /demo/yumaImage                                                         controllers.Demo.yumaImage()
GET        /demo/yumaMap                                                           controllers.Demo.yumaMap()
GET        /fcgi-bin/iipsrv.fcgi                                                   controllers.Demo.iipsrv


# Image Upload - with authentication
POST       /file/upload/:uid                                                       controllers.user.FileUpload.uploadFile(uid)
DELETE     /file/:id                                                               controllers.user.FileUpload.deleteFile(id)


##################################
### Delving object Server module #
##################################

# File Upload API
POST       /file/upload/:uid                                 controllers.dos.FileUpload.uploadFile(uid)
#DELETE     /file/:id                                         controllers.dos.FileUpload.deleteFile(id)

# File Download API
GET        /file/:id                                         controllers.dos.FileStore.get(id)

# Image Cache API
GET        /image/cache                                      controllers.dos.ImageCache.image(id, withDefaultFromUrl: Boolean ?= true)
GET        /thumbnail/cache                                  controllers.dos.ImageCache.thumbnail(id, width: Option[String], withDefaultFromUrl: Boolean ?= true)

# Image Display API

## Lookup by GridFS file ID
GET        /file/image/:id                                   controllers.dos.ImageDisplay.displayImage(id, fileId: Boolean = true)
GET        /file/thumbnail/:id/:width                        controllers.dos.ImageDisplay.displayThumbnail(id: String, orgId: String = "", collectionId: String = "", width: Option[String], browse: Boolean = false, fileId: Boolean = true)
GET        /file/thumbnaila/*id                              controllers.dos.ImageDisplay.displayThumbnail(id, orgId = "", collectionId = "", width: Option[String] = None, browse: Boolean = false, fileId: Boolean = true)

## Lookup by item ID or other form of IDs
GET        /image/:id                                        controllers.dos.ImageDisplay.displayImage(id, fileId: Boolean = false)
GET        /thumbnail/:orgId/:collectionId/:id/:width        controllers.dos.ImageDisplay.displayThumbnail(id, orgId, collectionId, width: Option[String], browse: Boolean = false, fileId: Boolean = false)
GET        /thumbnail/:orgId/:collectionId/*id               controllers.dos.ImageDisplay.displayThumbnail(id, orgId, collectionId, width: Option[String], browse: Boolean = false, fileId: Boolean = false)
GET        /thumbnail/:id/:width                             controllers.dos.ImageDisplay.displayThumbnail(id, orgId = "", collectionId = "", width: Option[String], browse: Boolean = true, fileId: Boolean = false)
GET        /thumbnail/*id                                    controllers.dos.ImageDisplay.displayThumbnail(id, orgId = "", collectionId = "", width: Option[String], browse: Boolean = true, fileId: Boolean = false)


# UI
GET     /@dos                                   controllers.dos.ui.MCP.index
GET     /@dos/browse                            controllers.dos.ui.MCP.browse(path)

PUT     /@dos/task/add                          controllers.dos.ui.Tasks.add(path: String, taskType: String)
DELETE  /@dos/task/cancel/:id                   controllers.dos.ui.Tasks.cancel(id: org.bson.types.ObjectId)
GET     /@dos/task/list                         controllers.dos.ui.Tasks.listAll
GET     /@dos/task/list/queued                  controllers.dos.ui.Tasks.list(what: String = "queued")
GET     /@dos/task/list/running                 controllers.dos.ui.Tasks.list(what: String = "running")
GET     /@dos/task/list/finished                controllers.dos.ui.Tasks.list(what: String = "finished")
GET     /@dos/task/status/:id                   controllers.dos.ui.Tasks.status(id: org.bson.types.ObjectId)

GET     /@dos/log/list/:taskId                 controllers.dos.ui.Logs.list(taskId: org.bson.types.ObjectId, lastCount: Option[Int])
GET     /@dos/log/view/:taskId                 controllers.dos.ui.Logs.view(taskId: org.bson.types.ObjectId)

# Custom Controllers and Functionality for customers
GET         /services/api/itin                                               controllers.custom.ItinEndPoint.search
POST        /services/api/itin                                               controllers.custom.ItinEndPoint.store


# User registration
GET        /registration                                                           controllers.Registration.index
POST       /registration/register                                                  controllers.Registration.register
GET        /registration/captcha/:id                                               controllers.Registration.captcha(id)
GET        /registration/activate/:activationToken                                 controllers.Registration.activate(activationToken)
GET        /registration/lostPassword                                              controllers.Registration.lostPassword
POST       /registration/resetPasswordEmail                                        controllers.Registration.resetPasswordEmail
GET        /registration/resetPassword/:resetPasswordToken                         controllers.Registration.resetPassword(resetPasswordToken)
POST       /registration/newPassword/:resetPasswordToken                           controllers.Registration.newPassword(resetPasswordToken)



# Enrichment lookups

GET         /enrichment/place/search                                               controllers.ws.Places.find

# Delving URL scheme

GET          /users                                                           controllers.Users.list(query: String ?= "", page: Int ?= 1)
GET          /users/search                                                    controllers.Users.listAsTokens(orgId: Option[String] = None, q: String ?= "")
#GET         /collections/?                                                   Collections.list
#GET         /objects/?                                                       DObjects.list
GET          /heritageObjects                                                 controllers.HeritageObjects.list(page: Int ?= 1)
#GET         /stories/?                                                       Stories.list

GET          /search                                                          controllers.Search.index(query ?= "*:*", page: Int ?= 1)

GET          /:user                                                           controllers.Profile.profile(user)

#POST        /{user}/block                                                    admin.NodeAdmin.blockUser

#GET         /{user}/label/search                                             Links.listFreeTextAsTokens

#POST        /{user}/link/{linkType}/{toType}/{toId}                          user.Links.add(fromType:'user')
#DELETE      /{user}/link/{linkType}/{link}                                   user.Links.removeById(fromType:'user')

#GET         /{user}/object                                                   DObjects.list
#GET         /{user}/object/add                                               user.DObjects.dobject
#GET         /{user}/object/{id}/update                                       user.DObjects.dobject
#POST        /{user}/object/{fromId}/link/{linkType}/{toType}/{toId}          user.Links.add(fromType:'object')
#DELETE      /{user}/object/{fromId}/link/{linkType}/{link}                   user.Links.removeById(fromType:'object')
#POST        /{user}/object/submit                                            user.DObjects.objectSubmit
#DELETE      /{user}/object/{id}/remove                                       user.DObjects.remove
#POST        /{user}/object/{id}/block                                        admin.NodeAdmin.blockDObject
#GET         /{user}/object/{id}                                              DObjects.dobject

GET          /:orgId/object/:spec/:recordId/overlay                          controllers.Search.record(orgId, spec, recordId, overlay: Boolean = true)
#POST        /:orgId/object/:spec/:recordId/link/:linkType/:toType/:toId     controllers.user.Links.add(fromType:'mdr')
#DELETE      /:orgId/object/:spec/:recordId/link/:linkType/:toType/:toId     controllers.user.Links.remove(fromType:'mdr')
GET          /:orgId/object/:spec/:recordId                                  controllers.Search.record(orgId, spec, recordId, overlay: Boolean = false)

GET          /:user/sip-creator.jnlp                                          controllers.organization.SipCreator.jnlp(user)

#GET         /{user}/collection                                               Collections.list
#GET         /{user}/collection/{id}/objects                                  Collections.listObjects
#GET         /{user}/collection/{collectionId}/object/{id}                    DObjects.dobject
#GET         /{user}/collection/add                                           user.Collections.collection
#GET         /{user}/collection/{id}/update                                   user.Collections.collection
#POST        /{user}/collection/{fromId}/link/{linkType}/{toType}/{toId}      user.Links.add(fromType:'collection')
#DELETE      /{user}/collection/{fromId}/link/{linkType}/{link}               user.Links.removeById(fromType:'collection')
#POST        /{user}/collection/submit                                        user.Collections.collectionSubmit
#DELETE      /{user}/collection/{id}/remove                                   user.Collections.remove
#POST        /{user}/collection/{id}/block                                    admin.NodeAdmin.blockUserCollection
#GET         /{user}/collection/{id}                                          Collections.collection

#GET         /{user}/story                                                    Stories.list
#GET         /{user}/story/add                                                user.Stories.story
#GET         /{user}/story/{id}/update                                        user.Stories.story
#POST        /{user}/story/{fromId}/link/{linkType}/{toType}/{toId}           user.Links.add(fromType:'story')
#DELETE      /{user}/story/{fromId}/link/{linkType}/{link}                    user.Links.removeById(fromType:'story')
#POST        /{user}/story/submit                                             user.Stories.storySubmit
#DELETE      /{user}/story/{id}/remove                                        user.Stories.remove
#POST        /{user}/story/{id}/block                                         admin.NodeAdmin.blockStory
#GET         /{user}/story/{id}                                               Stories.story
#GET         /{user}/story/{id}/read                                          Stories.read


GET         /:user/admin/profile/update                                       controllers.user.Admin.profile(user)
POST        /:user/admin/profile                                              controllers.user.Admin.profileSubmit(user)


# Organizations API

GET         /organizations/:orgId/api                                         controllers.api.Api.api(orgId)

GET         /organizations/:orgId/api/search                                  controllers.api.Search.searchApi(orgId, provider: Option[String] = None, dataProvider: Option[String] = None, collection: Option[String] = None)
GET         /organizations/:orgId/api/search/provider/:provider               controllers.api.Search.searchApi(orgId, provider: Option[String], dataProvider: Option[String] = None, collection: Option[String] = None)
GET         /organizations/:orgId/api/search/dataProvider/:dataProvider       controllers.api.Search.searchApi(orgId, provider: Option[String] = None, dataProvider: Option[String], collection: Option[String] = None)
GET         /organizations/:orgId/api/search/collection/:collection           controllers.api.Search.searchApi(orgId, provider: Option[String] = None, dataProvider: Option[String] = None, collection: Option[String])

GET         /organizations/:orgId/api/oai-pmh                                 controllers.Services.oaipmh(orgId: String, accessKey: Option[String] = None)
GET         /organizations/:orgId/api/oai-pmh/:accessKey                      controllers.Services.oaipmh(orgId: String, accessKey: Option[String])

GET         /organizations/:orgId/api/proxy                                   controllers.api.Api.explain(orgId)
GET         /organizations/:orgId/api/proxy/list                              controllers.api.Proxy.list(orgId)
GET         /organizations/:orgId/api/proxy/:proxyKey/search                  controllers.api.Proxy.query(orgId, proxyKey)
GET         /organizations/:orgId/api/proxy/:proxyKey/item/*itemKey           controllers.api.Proxy.item(orgId, proxyKey, itemKey)

GET         /organizations/:orgId/api/providers                               controllers.api.Organization.providers(orgId)
GET         /organizations/:orgId/api/dataProviders                           controllers.api.Organization.dataProviders(orgId)
GET         /organizations/:orgId/api/collections                             controllers.api.Organization.collections(orgId)

GET         /organizations/:orgId/api/index                                   controllers.api.Index.status(orgId)
POST        /organizations/:orgId/api/index                                   controllers.api.Index.submit(orgId)


## Deprecated - legacy routes support
GET         /organizations/:orgId/search                                      controllers.api.Search.searchApi(orgId, provider: Option[String] = None, dataProvider: Option[String] = None, collection: Option[String] = None)
GET         /organizations/:orgId/oai-pmh                                     controllers.Services.oaipmh(orgId: String, accessKey: Option[String] = None)
GET         /organizations/:orgId/oai-pmh/:accessKey                          controllers.Services.oaipmh(orgId: String, accessKey: Option[String])
GET         /organizations/:orgId/proxy/list                                  controllers.api.Proxy.list(orgId)
GET         /organizations/:orgId/proxy/:proxyKey/search                      controllers.api.Proxy.query(orgId, proxyKey)
GET         /organizations/:orgId/proxy/:proxyKey/item/*itemKey               controllers.api.Proxy.item(orgId, proxyKey, itemKey)


# Organizations UI
GET         /organizations/:orgId                                             controllers.organization.Organizations.index(orgId, language: Option[String] = None)

GET         /organizations/:orgId/admin                                       controllers.organization.Admin.index(orgId)
POST        /organizations/:orgId/admin/users/add                             controllers.organization.Admin.addUser(orgId)
DELETE      /organizations/:orgId/admin/users/remove                          controllers.organization.Admin.removeUser(orgId)
GET         /organizations/:orgId/admin/reloadFromDisk                        controllers.organization.Admin.reloadThemes(orgId)
GET         /organizations/:orgId/admin/indexDataSets                         controllers.organization.Admin.indexDataSets(orgId)

GET         /organizations/:orgId/admin/solrSearchProxy                       controllers.organization.Admin.solrSearchProxy(orgId)

GET         /organizations/:orgId/datasets/search                             controllers.organization.DataSets.listAsTokens(orgId: String, q: String ?= "")
GET         /organizations/:orgId/users/search                                controllers.Users.listAsTokens(orgId: Option[String], q: String ?= "")

GET         /organizations/:orgId/groups                                      controllers.organization.Groups.list(orgId)
GET         /organizations/:orgId/groups/create                               controllers.organization.Groups.groups(orgId, groupId: Option[org.bson.types.ObjectId] = None)
GET         /organizations/:orgId/groups/update/:groupId                      controllers.organization.Groups.groups(orgId, groupId: Option[org.bson.types.ObjectId])
POST        /organizations/:orgId/groups/create                               controllers.organization.Groups.update(orgId, groupId: Option[org.bson.types.ObjectId] = None)
POST        /organizations/:orgId/groups/update/                              controllers.organization.Groups.update(orgId, groupId: Option[org.bson.types.ObjectId] = None)
POST        /organizations/:orgId/groups/update/:groupId                      controllers.organization.Groups.update(orgId, groupId: Option[org.bson.types.ObjectId])
POST        /organizations/:orgId/groups/:groupId/addUser                     controllers.organization.Groups.addUser(orgId, groupId: org.bson.types.ObjectId)
DELETE      /organizations/:orgId/groups/:groupId/removeUser                  controllers.organization.Groups.removeUser(orgId, groupId: org.bson.types.ObjectId)
POST        /organizations/:orgId/groups/:groupId/addDataset                  controllers.organization.Groups.addDataset(orgId, groupId: org.bson.types.ObjectId)
DELETE      /organizations/:orgId/groups/:groupId/removeDataset               controllers.organization.Groups.removeDataset(orgId, groupId: org.bson.types.ObjectId)

GET         /organizations/:orgId/site/upload                                 controllers.organization.CMS.upload(orgId)
POST        /organizations/:orgId/site/upload/:uid                            controllers.organization.CMS.uploadSubmit(orgId, uid)
GET         /organizations/:orgId/site/listImages                             controllers.organization.CMS.listImages(orgId)
GET         /organizations/:orgId/site                                        controllers.organization.CMS.list(orgId, language: Option[String] = None)
GET         /organizations/:orgId/site/:language                              controllers.organization.CMS.list(orgId, language: Option[String])
GET         /organizations/:orgId/site/:language/page/add                     controllers.organization.CMS.page(orgId, language, page: Option[String] = None)
GET         /organizations/:orgId/site/:language/page/:page/update            controllers.organization.CMS.page(orgId, language, page: Option[String])
POST        /organizations/:orgId/site/page                                   controllers.organization.CMS.pageSubmit(orgId)
DELETE      /organizations/:orgId/site/:language/page/:key                    controllers.organization.CMS.pageDelete(orgId, key, language)
GET         /organizations/:orgId/site/:language/page/preview/:key            controllers.organization.CMS.pagePreview(orgId, language, key)

GET         /organizations/:orgId/dataset                                     controllers.organization.DataSets.list(orgId)
GET         /organizations/:orgId/dataset/statistics                          controllers.organization.DataSets.statistics(orgId)
GET         /organizations/:orgId/dataset/add                                 controllers.organization.DataSetControl.dataSet(orgId, spec: Option[String] = None)
GET         /organizations/:orgId/dataset/:spec/update                        controllers.organization.DataSetControl.dataSet(orgId, spec: Option[String])
POST        /organizations/:orgId/dataset/submit                              controllers.organization.DataSetControl.dataSetSubmit(orgId)
GET         /organizations/:orgId/dataset/:spec                               controllers.organization.DataSets.dataSet(orgId, spec)
POST        /organizations/:orgId/dataset/:spec/index                         controllers.organization.DataSetControl.index(orgId, spec)
POST        /organizations/:orgId/dataset/:spec/reindex                       controllers.organization.DataSetControl.reIndex(orgId, spec)
POST        /organizations/:orgId/dataset/:spec/cancel                        controllers.organization.DataSetControl.cancel(orgId, spec)
GET         /organizations/:orgId/dataset/:spec/indexingStatus                controllers.organization.DataSetControl.indexingStatus(orgId, spec)
GET         /organizations/:orgId/dataset/:spec/state                         controllers.organization.DataSetControl.state(orgId, spec)
POST        /organizations/:orgId/dataset/:spec/disable                       controllers.organization.DataSetControl.disable(orgId, spec)
POST        /organizations/:orgId/dataset/:spec/enable                        controllers.organization.DataSetControl.enable(orgId, spec)
DELETE      /organizations/:orgId/dataset/:spec/remove                        controllers.organization.DataSetControl.delete(orgId, spec)
POST        /organizations/:orgId/dataset/:spec/invalidate                    controllers.organization.DataSetControl.invalidate(orgId, spec)
POST        /organizations/:orgId/dataset/:spec/forceUnlock                   controllers.organization.DataSetControl.forceUnlock(orgId, spec)

GET         /organizations/:orgId/virtualCollection                           controllers.organization.VirtualCollections.list(orgId)
GET         /organizations/:orgId/virtualCollection/add                       controllers.organization.VirtualCollections.virtualCollection(orgId: String, spec: Option[String] = None)
GET         /organizations/:orgId/virtualCollection/:spec/update              controllers.organization.VirtualCollections.virtualCollection(orgId: String, spec: Option[String])
POST        /organizations/:orgId/virtualCollection/submit                    controllers.organization.VirtualCollections.submit(orgId: String)
GET         /organizations/:orgId/virtualCollection/:spec                     controllers.organization.VirtualCollections.view(orgId, spec)
DELETE      /organizations/:orgId/virtualCollection/:spec                     controllers.organization.VirtualCollections.delete(orgId, spec)


GET         /organizations/:orgId/sip-creator                                 controllers.organization.SipCreator.index(orgId)

GET         /api/sip-creator/list                                             controllers.SipCreatorEndPoint.listAll(accessKey: Option[String] ?= None)
GET         /api/sip-creator/unlock/:orgId/:spec                              controllers.SipCreatorEndPoint.unlock(orgId, spec, accessKey: Option[String] ?= None)
POST        /api/sip-creator/submit/:orgId/:spec                              controllers.SipCreatorEndPoint.acceptFileList(orgId, spec, accessKey: Option[String] ?= None)
POST        /api/sip-creator/submit/:orgId/:spec/:fileName                    controllers.SipCreatorEndPoint.acceptFile(orgId, spec, fileName, accessKey: Option[String] ?= None)
GET         /api/sip-creator/fetch/:orgId/:spec-sip.zip                       controllers.SipCreatorEndPoint.fetchSIP(orgId, spec, accessKey: Option[String] ?= None)

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                                     controllers.Assets.at(path="/public", file)
