# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET         /favicon.ico                                                            @controllers.Application.notFound(what = "favicon.ico")
GET         /assets/themes/:theme/info.conf                                         @controllers.Application.notFound(theme)

GET         /robots.txt                                                             controllers.Assets.at(path="/public", file="robots.txt")
GET         /browsers.html                                                          controllers.Assets.at(path="/public", file="browsers.html")

GET         /organizations/:orgId/*path                                             @controllers.Application.legacyOrganizationsPath(path, orgId)
POST        /organizations/:orgId/*path                                             @controllers.Application.legacyOrganizationsPath(path, orgId)
DELETE      /organizations/:orgId/*path                                             @controllers.Application.legacyOrganizationsPath(path, orgId)

# Home page
GET     /                                                                           @controllers.Application.index


# Form-based authentication
GET        /login                                                                   @controllers.Authentication.login
POST       /login                                                                   @controllers.Authentication.authenticate
GET        /logout                                                                  @controllers.Authentication.logout

# OAuth2
GET        /token                                                                   @controllers.OAuth2TokenEndpoint.token

# Demo space
GET        /demo/viewer                                                             @controllers.Demo.view(image: Option[String])
GET        /demo/yumaImage                                                          @controllers.Demo.yumaImage()
GET        /demo/yumaMap                                                            @controllers.Demo.yumaMap()
GET        /fcgi-bin/iipsrv.fcgi                                                    @controllers.Demo.iipsrv


# Image Upload - with authentication
POST       /file/upload/:uid                                                        @controllers.user.FileUpload.uploadFile(uid)
DELETE     /file/:id                                                                @controllers.user.FileUpload.deleteFile(id)


##################################
### Delving object Server module #
##################################

# File Download API
GET        /file/:id                                                                controllers.dos.FileStore.get(id)

# Image Cache API
GET        /image/cache                                                             controllers.dos.ImageCache.image(id, withDefaultFromUrl: Boolean ?= true)
GET        /thumbnail/cache                                                         controllers.dos.ImageCache.thumbnail(id, width: Option[String], withDefaultFromUrl: Boolean ?= true)

# Image Display API

## Lookup by GridFS file ID
GET        /file/image/:id                                                          controllers.dos.ImageDisplay.displayImage(id, fileId: Boolean = true)
GET        /file/thumbnail/:id/:width                                               controllers.dos.ImageDisplay.displayThumbnail(id: String, orgId: String = "", collectionId: String = "", width: Option[String], browse: Boolean = false, fileId: Boolean = true, headOnly: Boolean = false)
GET        /file/thumbnail/*id                                                      controllers.dos.ImageDisplay.displayThumbnail(id, orgId = "", collectionId = "", width: Option[String] = None, browse: Boolean = false, fileId: Boolean = true, headOnly: Boolean = false)

## Lookup by item ID or other form of IDs
GET        /image/:id                                                               controllers.dos.ImageDisplay.displayImage(id, fileId: Boolean = true)
HEAD       /thumbnail/:orgId/:collectionId/:id/:width                               controllers.dos.ImageDisplay.displayThumbnail(id, orgId, collectionId, width: Option[String], browse: Boolean = false, fileId: Boolean = false, headOnly: Boolean = true)
GET        /thumbnail/:orgId/:collectionId/:id/:width                               controllers.dos.ImageDisplay.displayThumbnail(id, orgId, collectionId, width: Option[String], browse: Boolean = false, fileId: Boolean = false, headOnly: Boolean = false)
GET        /thumbnail/:orgId/:collectionId/*id                                      controllers.dos.ImageDisplay.displayThumbnail(id, orgId, collectionId, width: Option[String], browse: Boolean = false, fileId: Boolean = false, headOnly: Boolean = false)
GET        /thumbnail/:id/:width                                                    controllers.dos.ImageDisplay.displayThumbnail(id, orgId = "", collectionId = "", width: Option[String], browse: Boolean = false, fileId: Boolean = true, headOnly: Boolean = false)
GET        /thumbnail/*id                                                           controllers.dos.ImageDisplay.displayThumbnail(id, orgId = "", collectionId = "", width: Option[String] = None, browse: Boolean = false, fileId: Boolean = true, headOnly: Boolean = false)


# UI
GET        /@dos                                                                       controllers.dos.ui.MCP.index
GET        /@dos/browse                                                                controllers.dos.ui.MCP.browse(path)

PUT        /@dos/task/add                                                              controllers.dos.ui.Tasks.add(path: String, taskType: String)
DELETE     /@dos/task/cancel/:id                                                       controllers.dos.ui.Tasks.cancel(id: org.bson.types.ObjectId)
GET        /@dos/task/list                                                             controllers.dos.ui.Tasks.listAll
GET        /@dos/task/list/queued                                                      controllers.dos.ui.Tasks.list(what: String = "queued")
GET        /@dos/task/list/running                                                     controllers.dos.ui.Tasks.list(what: String = "running")
GET        /@dos/task/list/finished                                                    controllers.dos.ui.Tasks.list(what: String = "finished")
GET        /@dos/task/status/:id                                                       controllers.dos.ui.Tasks.status(id: org.bson.types.ObjectId)

GET        /@dos/log/list/:taskId                                                      controllers.dos.ui.Logs.list(taskId: org.bson.types.ObjectId, lastCount: Option[Int])
GET        /@dos/log/view/:taskId                                                      controllers.dos.ui.Logs.view(taskId: org.bson.types.ObjectId)

GET        /@dos/thumbnail/:id/:width                                                  controllers.dos.ImageDisplay.displayThumbnail(id, orgId = "", collectionId = "", width: Option[String], browse: Boolean = true, fileId: Boolean = false, headOnly: Boolean = false)
GET        /@dos/thumbnail/*id                                                         controllers.dos.ImageDisplay.displayThumbnail(id, orgId = "", collectionId = "", width: Option[String], browse: Boolean = true, fileId: Boolean = false, headOnly: Boolean = false)


# User registration
GET        /registration                                                            @controllers.Registration.index
POST       /registration/register                                                   @controllers.Registration.register
GET        /registration/captcha/:id                                                @controllers.Registration.captcha(id)
GET        /registration/activate/:activationToken                                  @controllers.Registration.activate(activationToken)
GET        /registration/lostPassword                                               @controllers.Registration.lostPassword
POST       /registration/resetPasswordEmail                                         @controllers.Registration.resetPasswordEmail
GET        /registration/resetPassword/:resetPasswordToken                          @controllers.Registration.resetPassword(resetPasswordToken)
POST       /registration/newPassword/:resetPasswordToken                            @controllers.Registration.newPassword(resetPasswordToken)

## API

GET        /api                                                                    @controllers.api.Api.api

GET        /organizations/search                                                   @controllers.organization.Organizations.listAsTokens(q: String ?= "")

GET        /api/oai-pmh                                                            @controllers.api.OaiPmh.oaipmh(format: Option[String] = None, accessKey: Option[String] = None)
GET        /api/oai-pmh/:accessKey                                                 @controllers.api.OaiPmh.oaipmh(format: Option[String] = None, accessKey: Option[String])
GET        /api/oai-pmh/format/:format                                             @controllers.api.OaiPmh.oaipmh(format: Option[String], accessKey: Option[String] = None)
GET        /api/oai-pmh/format/:format/:accessKey                                  @controllers.api.OaiPmh.oaipmh(format: Option[String], accessKey: Option[String])

GET        /api/proxy                                                              @controllers.api.Api.explain
GET        /api/proxy/list                                                         controllers.api.Proxy.list
GET        /api/proxy/:proxyKey/search                                             controllers.api.Proxy.query(proxyKey)
GET        /api/proxy/:proxyKey/item/*itemKey                                      controllers.api.Proxy.item(proxyKey, itemKey)

GET        /api/providers                                                          @controllers.api.Organization.providers
GET        /api/dataProviders                                                      @controllers.api.Organization.dataProviders
GET        /api/collections                                                        @controllers.api.Organization.collections

# Organizations UI                                                              
GET         /organizations/:orgId                                                   @controllers.Application.legacyOrganizationsPath(path = "root", orgId)
GET         /admin                                                                  @controllers.organization.Organizations.index(language: Option[String] = None)

GET         /admin/admin                                                            @controllers.organization.Admin.index
POST        /admin/users/add                                                        @controllers.organization.Admin.addUser
DELETE      /admin/users/remove                                                     @controllers.organization.Admin.removeUser
POST        /admin/admin/add                                                        @controllers.organization.Admin.addAdmin
DELETE      /admin/admin/remove                                                     @controllers.organization.Admin.removeAdmin
                                                                                
GET         /admin/solrSearchProxy                                                  @controllers.organization.Admin.solrSearchProxy
GET         /admin/reProcessAll                                                     @controllers.organization.Admin.reProcessAll
                                                                                
GET         /admin/users/search                                                     @controllers.Users.listAsTokens(orgId: Option[String], q: String ?= "")
                                                                                
GET         /admin/groups/resources/:resourceType/search                            @controllers.organization.Groups.searchResourceTokens(resourceType, q: String ?= "")
                                                                                
GET         /admin/groups                                                           @controllers.organization.Groups.list
GET         /admin/groups/create                                                    @controllers.organization.Groups.groups(groupId: Option[org.bson.types.ObjectId] = None)
GET         /admin/groups/update/:groupId                                           @controllers.organization.Groups.groups(groupId: Option[org.bson.types.ObjectId])
DELETE      /admin/groups/remove/:groupId                                           @controllers.organization.Groups.remove(groupId: Option[org.bson.types.ObjectId])
POST        /admin/groups/submit                                                    @controllers.organization.Groups.submit
                                                                                
GET         /admin/directory/organizationLookup                                     @controllers.organization.DataSetControl.organizationLookup(term)


GET         /places/search                                                          @controllers.ws.Places.listAsTokens(q: String ?= "", countryCode: Option[String])

GET         /users                                                                 @controllers.Users.list(query: String ?= "", page: Int ?= 1)
GET         /users/search                                                          @controllers.Users.listAsTokens(orgId: Option[String] = None, q: String ?= "")

GET         /search                                                                @controllers.Search.index(query ?= "*:*", page: Int ?= 1)

->          /                                                                       search.Routes
->          /                                                                       dataset.Routes
->          /                                                                       indexApi.Routes
->          /                                                                       cms.Routes
->          /                                                                       statistics.Routes
->          /                                                                       mediator.Routes
->          /                                                                       sdu.Routes
->          /                                                                       ead.Routes


GET         /:user                                                                 @controllers.Profile.profile(user)

GET         /:user/admin/profile/update                                            @controllers.user.Admin.profile(user)
POST        /:user/admin/profile                                                   @controllers.user.Admin.profileSubmit(user)

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                                           controllers.Assets.at(path="/public", file)


GET         /:orgId/:spec/*recordId                                                 @controllers.FullView.render(orgId, spec, recordId, format: Option[String])


